"""
Discord Library Compatibility Layer

This module provides compatibility between different Discord library versions (discord.py vs py-cord).
It maps API differences and provides fallbacks for missing features to ensure cogs work seamlessly
regardless of which library version is being used.
"""
import logging
import importlib
import sys
from typing import Any, Optional, Union, Dict, List

logger = logging.getLogger(__name__)

# Import discord here to ensure it's available for the entire module
try:
    import discord
except ImportError:
    logger.error("Failed to import discord library")
    discord = None

# Detect which Discord library we're using
USING_PYCORD = False
USING_DISCORDPY = False

if discord is not None:
    if hasattr(discord, '__title__') and discord.__title__ == 'pycord':
        USING_PYCORD = True
        logger.info("Detected py-cord library")
    else:
        USING_DISCORDPY = True
        logger.info("Detected discord.py library")

# Define our compatibility classes - use SlashCommandOptionType for py-cord compatibility
class AppCommandOptionType:
    """Discord application command option types"""
    STRING = 3
    INTEGER = 4
    BOOLEAN = 5
    USER = 6
    CHANNEL = 7
    ROLE = 8
    MENTIONABLE = 9
    NUMBER = 10
    ATTACHMENT = 11
    
    @classmethod
    def from_enum(cls, enum_class):
        """Create from another enum class if available"""
        if enum_class is None:
            return cls
        # Copy values if possible
        return enum_class

# Update our AppCommandOptionType from py-cord's SlashCommandOptionType
if USING_PYCORD and discord is not None and hasattr(discord, 'enums') and hasattr(discord.enums, 'SlashCommandOptionType'):
    logger.info("Updating AppCommandOptionType from SlashCommandOptionType")
    for attr_name in dir(discord.enums.SlashCommandOptionType):
        if not attr_name.startswith('_'):
            try:
                value = getattr(discord.enums.SlashCommandOptionType, attr_name)
                setattr(AppCommandOptionType, attr_name, value)
            except Exception as e:
                logger.error(f"Error copying {attr_name} from SlashCommandOptionType: {e}")

# Create app_commands compatibility layer for py-cord
if USING_PYCORD and discord is not None and not hasattr(discord, 'app_commands'):
    # Create Choice for autocomplete
    class Choice:
        def __init__(self, name, value):
            self.name = name
            self.value = value
    
    # Create app_commands module
    class AppCommandsModule:
        def __init__(self):
            self.Choice = Choice
        
        # Command decorator
        def command(self, name=None, description=None, **kwargs):
            def decorator(func):
                if hasattr(discord.commands, 'slash_command'):
                    slash_decorator = discord.commands.slash_command(
                        name=name, 
                        description=description,
                        **kwargs
                    )
                    return slash_decorator(func)
                return func
            return decorator
        
        # Describe decorator for command options
        def describe(self, **kwargs):
            def decorator(func):
                return func
            return decorator
        
        # Autocomplete decorator
        def autocomplete(self, param_name=None):
            def decorator(func):
                if hasattr(discord.commands, 'autocomplete'):
                    return discord.commands.autocomplete(param_name)(func)
                return func
            return decorator
        
        # Guild only decorator
        def guild_only(self):
            def decorator(func):
                if hasattr(discord.commands, 'guild_only'):
                    return discord.commands.guild_only()(func)
                return func
            return decorator
    
    # Add app_commands to discord
    setattr(discord, 'app_commands', AppCommandsModule())
    logger.info("Created app_commands compatibility layer for py-cord")

# Command tree compatibility for py-cord
if USING_PYCORD and discord is not None and hasattr(discord, 'ext') and hasattr(discord.ext, 'commands'):
    BotClass = discord.ext.commands.Bot
    
    if not hasattr(BotClass, 'tree'):
        # Create a command tree class for py-cord Bot
        class CommandTree:
            def __init__(self, bot):
                self.bot = bot
            
            async def sync(self, *args, **kwargs):
                # Use sync_commands if available
                if hasattr(self.bot, 'sync_commands'):
                    return await self.bot.sync_commands(*args, **kwargs)
                return []
        
        # Patch Bot.__init__ to add tree
        original_init = BotClass.__init__
        
        def patched_init(self, *args, **kwargs):
            original_init(self, *args, **kwargs)
            if not hasattr(self, 'tree'):
                self.tree = CommandTree(self)
        
        BotClass.__init__ = patched_init
        logger.info("Added tree attribute to Bot class for py-cord")

# Add hybrid_group to commands for py-cord
if USING_PYCORD and discord is not None and hasattr(discord, 'ext') and hasattr(discord.ext, 'commands'):
    if not hasattr(discord.ext.commands, 'hybrid_group'):
        def hybrid_group(*args, **kwargs):
            """Hybrid group command that works with py-cord"""
            group_decorator = discord.ext.commands.group(*args, **kwargs)
            
            def decorator(func):
                # Apply group decorator
                result = group_decorator(func)
                
                # Apply slash command if needed
                if hasattr(discord.commands, 'slash_command') and not kwargs.get('invoke_without_command', False):
                    slash_decorator = discord.commands.slash_command(
                        name=kwargs.get('name'),
                        description=kwargs.get('description', 'No description')
                    )
                    result = slash_decorator(result)
                
                return result
            
            return decorator
        
        # Add hybrid_group to commands
        discord.ext.commands.hybrid_group = hybrid_group
        logger.info("Added hybrid_group to commands for py-cord")

def create_option(name: str, 
                description: str, 
                option_type: Any, 
                required: bool = False, 
                choices: Optional[List[Dict[str, Any]]] = None) -> Any:
    """Create a command option compatible with both libraries"""
    if USING_PYCORD:
        if hasattr(discord, 'commands') and hasattr(discord.commands, 'Option'):
            try:
                from discord.commands import Option
                return Option(
                    name=name,
                    description=description,
                    type=option_type,
                    required=required,
                    choices=choices if choices is not None else []
                )
            except ImportError:
                logger.error("Failed to import Option from discord.commands")
    
    # Fall back to dictionary format
    return {
        'name': name,
        'description': description,
        'type': option_type,
        'required': required,
        'choices': choices if choices is not None else []
    }

def get_app_commands_module():
    """Get the appropriate app_commands module based on Discord library"""
    if USING_PYCORD:
        # For py-cord, app_commands module is simulated
        return getattr(discord, 'app_commands', None)
    elif USING_DISCORDPY:
        # For discord.py, use built-in app_commands
        return getattr(discord, 'app_commands', None)
    return None